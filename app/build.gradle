import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: 'dependencies-vars.gradle'


class ConfigField {
    String type, name, property
    boolean isResValue = false

    ConfigField(String type, String name, String property) {
        this.type = type
        this.name = name
        this.property = property
    }
}

def configFieldList = [
        new ConfigField("String", "API_BASE_URL", "url.base.host")
]


def envProperty(String propName) {
    def flavor = getCurrentFlavor()
    flavor = flavor != null ? flavor : project.flavorName

    def propsFile = rootProject.file('config/env/' + flavor + '.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return ""
    }
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find())
        return matcher.group(1).toLowerCase()
    else {
        println "NO MATCH FOUND"
        return ""
    }
}

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.oliver.countriescatalogviakotlin"
        minSdkVersion 18
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"
    productFlavors {
        dev {
            dimension "default"
            for (ConfigField field : configFieldList) {
                buildConfigField field.type, field.name, envProperty(field.property)

                if (field.isResValue) {
                    resValue(field.type.toLowerCase(), field.name, envProperty(field.property))
                }
            }
        }

        prod {
            dimension "default"
            for (ConfigField field : configFieldList) {
                buildConfigField field.type, field.name, envProperty(field.property)

                if (field.isResValue) {
                    resValue(field.type.toLowerCase(), field.name, envProperty(field.property))
                }
            }
        }
    }

    buildscript {
        tasks.withType(JavaCompile) {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    androidExtensions {
        experimental = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:${support}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // UI Support
    implementation "com.android.support:support-compat:${support}"
    implementation "com.android.support:recyclerview-v7:${support}"
    implementation "com.android.support:cardview-v7:${support}"
    implementation "com.android.support:design:${support}"

    //dagger 2
    implementation "com.google.dagger:dagger:${dagger}"
    kapt "com.google.dagger:dagger-compiler:${dagger}"

    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:${okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okhttp}"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:${okhttp}"

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:${retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava:${retrofit}"
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'joda-time:joda-time:2.9.9'

    // RxAndroid
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'io.reactivex:rxjava:1.3.4'

    //picasso
    implementation 'com.squareup.picasso:picasso:2.71828'

    //timber log
    implementation 'com.github.ajalt:timberkt:1.5.1'

    //image processing
    implementation "com.github.bumptech.glide:glide:${glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:4.7.1"
}
